main:
    irmovq pino, %rsp
    irmovq pino, %rbp
    irmovq $0, %rcx        # tulos
    irmovq $0x10000, %rax  # bit juttu
    irmovq $1, %r8         # vakio
    
    
while:
    rrmovq %rax, %rbx  # vertailuun
    rrmovq %rax, %rdi  # rdi shiftattava luku shiftille 
    call shift2
    rrmovq %rdi, %rax  # bit >> 2, takaisin rax
    subq %r12, %rbx    # bit > numero
    je while
    
while1:
    irmovq $0, %r10    # nolla
    irmovq $0, %rsi    # bit + res
    rrmovq %rax, %rsi  # bit
    addq %rcx, %rsi    # bit + res
    rrmovq %rsi, %r9   # vertailu
    subq %r12, %r9     # tarkistetaan onko num >= res + bit
    jg ohitus
    subq %rsi, %r12    # num =- bit + res
    rrmovq %rcx, %rdi
    call shift         # res >> 1
    rrmovq %rdi, %rcx
    addq %rax, %rcx    # res = res >> 1 + bit
    jmp bit
    
ohitus:
    rrmovq %rcx, %rdi
    call shift         # res >> 1
    rrmovq %rdi, %rcx
    jmp bit
    
bit:
    rrmovq %rax, %rdi  # shift
    call shift
    call shift
    rrmovq %rdi, %rax  # bit takaisin rax
    subq %rax, %r10    # bit != 0
    jne while1

.pos 0x200
# stackoverflow
# Käytännössä left shift niin kauan, että mennään yli intmax -> tulee neg
# Sopiva määrä leftä lisää ja on shiftattu yksi oikealle
# Ei lähelläkään nopein mahdollinen, mutta toimii, en keksi parempaa.
shift:
    irmovq $0, %r13
    irmovq $63, %r14
    
rshift:                   
    addq %r13, %r13
    andq %rdi, %rdi
    jge MSB_zero
    xorq %r8, %r13

MSB_zero:
    addq %rdi, %rdi
    subq %r8, %r14
    jne rshift
    rrmovq %r13, %rdi
    ret # tulos rdi
    
shift2:
    irmovq $0, %r13
    irmovq $62, %r14
    
rshift:                   
    addq %r13, %r13
    andq %rdi, %rdi
    jge MSB_zero
    xorq %r8, %r13

MSB_zero:
    addq %rdi, %rdi
    subq %r8, %r14
    jne rshift
    rrmovq %r13, %rdi
    ret # tulos rdi
    
.pos 0x400
pino:
