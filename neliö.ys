main:
    irmovq pino, %rsp    # pino-osoitin
    irmovq pino, %rbp
    irmovq $0, %rcx  # tulos
    irmovq $16, %r12  # numero
    irmovq $0x8000, %rax  # bit juttu
    irmovq $4, %rsi  #jakaja 1
    irmovq $2, %rdx  # jakaja 2
    irmovq $1, %r8
    irmovq $-1, %r9
    
    
while:  # eka while loop bit shift 2 oikealle
    call shift
    subq %r12, %rbx
    je while
    
while1:
    irmovq $0, %r10 # nolla
    irmovq $0, %rdi # bit + res
    addq %rax, %rdi
    addq %rcx, %rdi
    
    rrmovq %rcx, %r11  # bitshift tulos 1 oikealle
    loop:
        addq %r8, %r9
        subq %rdx, %r11
        jge loop
    rrmovq %r9, %rcx
    subq %r12, %rdi  # tarkistetaan onko num >= tulos + bit
    jl ohitus
    subq %rdi, %r12
    addq %rax, %rcx
ohitus:
    call shift
    subq %rax, %r10
    jne while1

.pos 0x200
shift:
    rrmovq %rax, %rbx
    loop:
        addq %r8, %r9
        subq %rsi, %rbx
        jge loop
    rrmovq %r9, %rax
    ret
    
.pos 0x400
pino:

.pos 0x450
array:
    .quad 0xFFFF # ei siirtoa
    .quad 0xFFFE # shift 1
    .quad 0xFFFC # shift 2
    .quad 0xFFF8 # shift 3 jne.
    .quad 0xFFF0
    .quad 0xFFE0
    .quad 0xFFC0
    .quad 0xFF80
    .quad 0xFE00
    .quad 0xFC00
    .quad 0xF800
    .quad 0xF000
    .quad 0xE000
    .quad 0xC000
    .quad 0x8000
    