main:
    irmovq pino, %rbp
    irmovq pino, %rsp
    irmovq $123456789, %r11
    irmovq $987654321, %r12 # kerrottavat
    irmovq $8, %rdi
    irmovq array, %rsi # alku
    irmovq $1, %rdx
    irmovq $16, %r13  # count (kuinka monta kertaa << 1)

loop:
    irmovq $0x0278, %r8 # loppu
    mrmovq (%rsi), %rbx # siirretään arraystä arvo rbx
    subq %rdx, %r13
    andq %r11, %rbx # and muistipaikasta ja kerrottavasta
    je ohitus       # jos ei olla 1 kohdalla hypätään ohi
    irmovq $1, %rax
    subq %rbx, %rax
    je väli         # jos ollaan 1 kohdalla, mutta count -1 hypätään ohi
    call kerto      # jos ollaan 1 kohdalla lasketaan
    pushq %rbx
    ohitus:
    addq %rdi, %rsi # kasvatetaan muistipaikkaa 8
    subq %rsi, %r8  # ollaanko taulukon lopussa
    jge loop
    irmovq $0, %rax
    jmp loop1

loop1:
    popq %r13
    addq %r13, %rax
    rrmovq %rbp, %r10  # tarkistetaan ollaanko pinon lopussa
    subq %rsp, %r10
    jne loop1
    halt

väli:
    pushq %r12
    jmp ohitus
    
    
.pos 0x100
kerto:
rrmovq %r12, %rbx   # kerrottava
rrmovq %r13, %r9
    loop2:
    addq %rbx, %rbx # kerrottava << 1
    subq %rdx, %r9  # count > 0 (-1)
    jg loop2
    ret
    

.pos 0x200
array:
    .quad 0x8000
    .quad 0x4000
    .quad 0x2000
    .quad 0x1000
    .quad 0x800
    .quad 0x400
    .quad 0x200
    .quad 0x100
    .quad 0x80
    .quad 0x40
    .quad 0x20
    .quad 0x10
    .quad 0x8
    .quad 0x4
    .quad 0x2
    .quad 0x1

.pos 0x300
pino:

