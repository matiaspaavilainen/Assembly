.pos 0
    irmovq array, %r11     # muistipaikka 0x1000
    irmovq $3,%r12         # 3
    rmmovq %r12,(%r11)
    irmovq $5,%r12         # 5
    rmmovq %r12,8(%r11)
    irmovq $2584,%r12      # 8
    rmmovq %r12,16(%r11)
    irmovq $0,%r12         # loppunolla
    rmmovq %r12,24(%r11)

    # rbp ja rsp pinolle
    # %rax = käsiteltävä luku / apumuuttuja
    # %rdi ja %rsi = arvot aliohjelmille

main:
    irmovq pino, %rbp
    irmovq pino, %rsp      # pino alustus
    irmovq $8, %r8         # vakio 8 muistiosoitteita varten
    irmovq $1, %r10        # vakio
    irmovq $5, %r9         # vakio

loop:
    irmovq $0x800, %rbx
    mrmovq (%r11), %rax    # otetaan taulukosta luku
    irmovq $0, %r12        # vakio 0 looppaamiseen
    subq %rax, %r12        # kun saavutetaan lopetus 0, ohjelma pysähtyy
    je stop
    rmmovq %rax, (%rbx)    # rax talteen
    addq %r8, %r11         # seuraava osoite
    call fibonacci         
    jmp loop
    
stop:
    halt
    # Kaikki luvut olivat Fibonaccin lukuja
 
end:
    mrmovq (%rbx), %rax   # rax takaisin
    halt
    #Kaikki eivät olleet Fibonaccin lukuja


.pos 0x200
fibonacci:
    # rbx, rcx tulokset
    # rdx neliöjuuren tulos
    # rdi ja rsi luvut aliohjelmille
    
    # Ensin rbx ja sen jälkeen rcx, jos rbx ei ole fibonacci

    call lasku
    rrmovq %rbx, %rdi      # neliöjuurelle
    call neliojuuri
    rrmovq %rsi, %rdx      # rdx = sqrt(rbx)
    rrmovq %rdx, %rdi
    rrmovq %rdx, %rsi      # kertolasku rdx * rdx
    call kertolasku
    subq %rbx, %rdx        # rdx * rdx == rbx
    jne lasku2             # ei fibonacci -> lasku2
    ret

lasku2:
    rrmovq %rcx, %rdi      # neliöjuurelle
    call neliojuuri
    rrmovq %rsi, %rdx      # rdx = sqrt(rcx)
    irmovq $0x800, %rbx
    rmmovq %rcx, 8(%rbx)   # otetaan rcx talteen koska rcx käytössä kertolaskussa
    rrmovq %rdx, %rdi      # rdi, rsi = rdx
    rrmovq %rdx, %rsi      # kertolasku rdx * rdx
    call kertolasku
    mrmovq 8(%rbx), %rcx   # rcx takaisin kertolaskun jälkeen
    subq %rcx, %rdx        # rdx * rdx == rcx
    jne end
    ret


.pos 0x300
lasku:

    # rcx, rbx = r9 * rax * rax +- (r9 - r10)
    
    rrmovq %rax, %rdi      # rax = rdi ja rsi kertolaskuun
    rrmovq %rax, %rsi
    call kertolasku
    
    rrmovq %rdx, %rdi      # rdi = rax*rax
    rrmovq %r9, %rsi       # rsi = r9
    call kertolasku        # r9 * rax * rax
    
    rrmovq %rdx, %rcx      # siirretään kertolaskun tulos rcx
    rrmovq %rdx, %rbx      # siirretään kertolaskun tulos rbx
    subq %r10, %r9         # 5 - 1 = 4, säästää rekistereitä
    addq %r9, %rcx         # rcx + 4
    subq %r9, %rbx         # rbx - 4
    irmovq $5, %r9         # r9 = 5
    ret


.pos 0x350
kertolasku:
    
    # rax = välitulosten alku
    # rdx = kertolaskun tulos
    # rsi ja rdi = kerrottavat luvut
    # r8 = 8
    # r9 = lookUp arvo / array loppu
    # r12 = count = 32
    # r13 = lookUp muistiosoite
    # r14 = lookUp tulosten alku
    
    irmovq lookUp, %r13     # lookUp osoite
    irmovq $0xa00, %rax     # välitulosten alku
    irmovq $32, %r12        # count
    
loopkerto:
    mrmovq (%r13), %r9      # siirretään arraystä arvo r9
    subq %r10, %r12         # count - 1
    andq %rdi, %r9          # and muistipaikasta ja kerrottavasta
    je ohituskerto          # jos ollaan 0-bitin kohdalla hypätään ohi
    
    irmovq $1, %rdx         # rdx tulos
    subq %r9, %rdx          # 1 - and tulos, eli onko r9 arvo 1
    je vali                 # jos arvo = 1, lisätään rsi suoraan, ei shiftattuna
    
    call kerto              # jos ollaan 1-bitin kohdalla lasketaan
    
    rmmovq %r9, (%rax)      # r9 tässä rsi << n
    addq %r8, %rax          # rcx osoite + 8
    
    ohituskerto: 
    addq %r8, %r13          # kasvatetaan lookUp muistipaikkaa 8
    irmovq $0x09f8, %r9     # lookUp loppu
    subq %r13, %r9          # ollaanko lookUp lopussa
    jge loopkerto 
    
    irmovq $0, %rdx         # nollataan rdx
    subq %r8, %rax          # vähennetään 8 koska viimeisen luvun kohdalla lisätään 8
                            # jos ei vähennetä, osoittaa väärään muistipaikkaan
    
    loop1:
        mrmovq (%rax), %r9    # arvo r14 -> r9
        addq %r9, %rdx        # tulos rdx
        rrmovq %rax, %r12     # rcx paikka -> r12
        subq %r8, %rax        # vähennetään 8
        irmovq $0xa00, %rsi   # välitulosten alku
        subq %rsi, %r12       # tarkistetaan ollaanko lopussa
        jg loop1
        
        irmovq $5, %r9        # r9 = 5
        ret

    vali:
        rmmovq %rsi, (%rax)   # ei bit shiftiä
        addq %r8, %rax        # muistipaikan lisäys
        jmp ohituskerto

.pos 0x460
pino:


.pos 0x480
   kerto:
   rrmovq %rsi, %r9    # kerrottava
   rrmovq %r12, %r14   # count -> r14
   
      loop2:
      addq %r9, %r9    # kerrottava << 1
      subq %r10, %r14  # count > 0
      jg loop2
      ret


.pos 0x500
neliojuuri:
    # rdi = num
    # rsi = res
    # r8 = 0
    # r9 = bit + res
    # r10 = 1
    # r14 vertailu
    irmovq $0, %rsi
    irmovq $0x10000000, %rax  # bit 1 << 32
    
while:
    rrmovq %rax, %r9          # vertailuun
    rrmovq %rax, %r12         # rdi shiftattava luku shiftille 
    call shift2
    
    rrmovq %r12, %rax         # bit takaisin rax
    subq %rdi, %r9            # bit > numero
    je while
    
while1:
    irmovq $0, %r8       # nolla
    irmovq $0, %r9       # bit + res
    rrmovq %rax, %r9     # bit
    addq %rsi, %r9       # bit + res
    rrmovq %r9, %r14     # vertailu
    subq %rdi, %r14      # tarkistetaan onko num >= res + bit
    jg ohitus
    
    subq %r9, %rdi       # num =- bit + res
    rrmovq %rsi, %r12    # res   
    call shift           # res >> 1
    
    rrmovq %r12, %rsi    # res takaisin
    addq %rax, %rsi      # res = res >> 1 + bit
    jmp bit
    
ohitus:
    rrmovq %rsi, %r12    # res
    call shift           # res >> 1
    
    rrmovq %r12, %rsi    # res takaisin
    jmp bit
    
bit:
    rrmovq %rax, %r12    # shift
    call shift2          # bit >> 2 
    
    rrmovq %r12, %rax    # bit takaisin rax
    subq %rax, %r8       # bit != 0
    jne while1
    
    irmovq $32, %r12     # r12 palautus
    irmovq $8, %r8       # r8
    irmovq $5, %r9       # r9
    irmovq $0xa00, %r14  # r14
    ret                

.pos 0x600
# stackoverflow
# Käytännössä left shift niin kauan, että mennään yli intmax -> tulee neg
# Left shift * 63 ja on shiftattu yksi oikealle

shift:
    irmovq $0, %r8
    subq %r12, %r8   # jos shiftattava = 0, palataan
    irmovq $0, %r8
    irmovq $63, %r14
    jne rshift
    ret
    
rshift:                   
    addq %r8, %r8
    andq %r12, %r12
    jge MSB_zero
    xorq %r10, %r8

MSB_zero:
    addq %r12, %r12
    subq %r10, %r14
    jne rshift
    rrmovq %r8, %r12
    irmovq $0, %r8      # palautetaan r8 = 0
    ret                 # tulos r12

shift2:
    irmovq $0, %r8
    subq %r12, %r8   # jos shiftattava = 0, palataan
    irmovq $0, %r8
    irmovq $62, %r14
    
rshift2:                   
    addq %r8, %r8
    andq %r12, %r12
    jge MSB_zero2
    xorq %r10, %r8

MSB_zero2:
    addq %r12, %r12
    subq %r10, %r14
    jne rshift2
    rrmovq %r8, %r12
    irmovq $0, %r8         # palautetaan r8 = 0
    ret                    # tulos r12
    
    
.pos 0x800
rekisterit:
    # rekisterien arvoja
    
.pos 0x900
lookUp:
   .quad 0x80000000
   .quad 0x40000000
   .quad 0x20000000
   .quad 0x10000000
   .quad 0x8000000
   .quad 0x4000000
   .quad 0x2000000
   .quad 0x1000000
   .quad 0x800000
   .quad 0x400000
   .quad 0x200000
   .quad 0x100000
   .quad 0x80000
   .quad 0x40000
   .quad 0x20000
   .quad 0x10000
   .quad 0x8000
   .quad 0x4000
   .quad 0x2000
   .quad 0x1000
   .quad 0x800
   .quad 0x400
   .quad 0x200
   .quad 0x100
   .quad 0x80
   .quad 0x40
   .quad 0x20
   .quad 0x10
   .quad 0x8
   .quad 0x4
   .quad 0x2
   .quad 0x1
   # kertolaskun välitulokset

.pos 0x1000
array:
